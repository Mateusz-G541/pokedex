name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ALLOWED_ORIGINS: "https://pokedex-87cl.vercel.app,https://another-allowed-domain.com"
      POKEMON_API_URL: "http://localhost:20275/api/v2"
    steps:
      - uses: actions/checkout@v3

      # Start Pokemon API Service manually to ensure latest image
      - name: Start Pokemon API Service
        run: |
          echo "üöÄ Starting Pokemon API Service..."
          
          # Pull latest image
          echo "üîÑ Pulling latest image..."
          docker pull quavaghar2/pokemon-api-service:latest
          
          # Start container in background
          echo "üì¶ Starting container..."
          docker run -d \
            --name pokemon-api-service \
            -p 20275:20275 \
            -e NODE_ENV=production \
            -e ALLOWED_ORIGINS="https://pokedex-87cl.vercel.app,https://another-allowed-domain.com" \
            quavaghar2/pokemon-api-service:latest
          
          # Wait for container to initialize (5 minutes for data loading)
          echo "‚è≥ Waiting for Pokemon API Service to initialize (5 minutes)..."
          sleep 300
          
          # Test health endpoint with retries
          echo "üîç Testing health endpoint..."
          for i in {1..10}; do
            if curl -f http://localhost:20275/health; then
              echo "‚úÖ Pokemon API Service is healthy!"
              break
            else
              echo "‚è≥ Health check attempt $i/10 failed, retrying in 30 seconds..."
              sleep 30
            fi
            if [ $i -eq 10 ]; then
              echo "‚ùå Pokemon API Service failed to become healthy"
              echo "üìã Container logs:"
              docker logs pokemon-api-service
              exit 1
            fi
          done
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      # --- SERVICE DEBUGGING ---
      - name: Debug Pokemon API Service
        run: |
          echo "üîç Debugging Pokemon API Service..."
          
          # Check if container is running
          docker ps -a
          
          # Get container ID for pokemon-api-service
          CONTAINER_ID=$(docker ps -q --filter ancestor=quavaghar2/pokemon-api-service:latest)
          echo "Container ID: $CONTAINER_ID"
          
          # Show container logs
          if [ ! -z "$CONTAINER_ID" ]; then
            echo "üìã Container logs:"
            docker logs $CONTAINER_ID
            
            echo "üîç Container inspect:"
            docker inspect $CONTAINER_ID --format='{{.State.Health}}'
            
            echo "üåê Testing health endpoint manually:"
            curl -v http://localhost:20275/health || echo "Health endpoint failed"
            
            echo "üåê Testing if port is accessible:"
            nc -zv localhost 20275 || echo "Port 20275 not accessible"
          else
            echo "‚ùå No container found"
          fi

      # --- SERVICE HEALTH CHECKS ---
      - name: Check Pokemon API Service status
        run: |
          echo "üîç Checking Pokemon API Service health..."
          curl -f http://localhost:20275/health
          echo "‚úÖ Pokemon API Service is ready!"

      # --- BACKEND ---
      - name: Install backend dependencies
        run: npm ci

      - name: Lint backend
        run: npm run lint

      - name: Build backend
        run: npm run build

      # Cache Playwright browsers to speed up subsequent runs
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ms-playwright
            /home/runner/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Test backend
        env:
          POKEMON_API_URL: "http://localhost:20275/api/v2"
          NODE_ENV: test
        run: npm run test:api

      # --- FRONTEND ---
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Test frontend
        working-directory: ./frontend
        run: npm test

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      ALLOWED_ORIGINS: "https://pokedex-87cl.vercel.app,https://another-allowed-domain.com"
    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Backend API
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_BACKEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_BACKEND }}
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Deploy Frontend App
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID_FRONTEND }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_FRONTEND }}
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
