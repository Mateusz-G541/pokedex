name: Deploy Pokedex

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Backend Dependencies
        run: npm install

      - name: Build Backend
        run: npm run build

      - name: Run Backend Tests
        env:
          NODE_ENV: test
          PORT: 3000
          CI: true
          HOST: 127.0.0.1
        run: |
          # Kill any existing process on port 3000
          npx kill-port 3000 || true

          # Start the server in development mode
          NODE_ENV=development ts-node-dev --transpile-only src/index.ts &
          SERVER_PID=$!

          # Wait for the server to be ready with retries
          echo "Waiting for server to start..."
          for i in {1..30}; do
            if curl -s http://127.0.0.1:3000/api/health > /dev/null; then
              echo "Server is ready!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to start after 30 seconds"
              exit 1
            fi
            echo "Waiting for server... attempt $i"
            sleep 1
          done

          # Run the tests
          echo "Running tests..."
          npm run test:api
          TEST_EXIT_CODE=$?

          # Kill the server process
          echo "Cleaning up..."
          kill $SERVER_PID || true
          npx kill-port 3000 || true

          # Exit with the test status
          exit $TEST_EXIT_CODE

      - name: Install Frontend Dependencies
        working-directory: ./frontend
        run: npm install

      - name: Run Frontend Tests
        working-directory: ./frontend
        env:
          NODE_ENV: test
          CI: true
        run: npm test

      - name: Install Vercel CLI
        run: npm install -g vercel

      - name: Deploy Backend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes

      - name: Deploy Frontend
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: vercel --prod --token=${{ secrets.VERCEL_TOKEN }} --yes
